{
  "name": "Code Indexing Workflow (Single File)",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger-node",
      "name": "Start Indexing",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// 인덱싱 시작 로그\nconsole.log('🚀 코드베이스 인덱싱 시작...');\nconsole.log('📁 대상 경로: /data/shared/cloned_repo');\n\nreturn {\n  status: 'starting',\n  timestamp: new Date().toISOString(),\n  target_path: '/data/shared/cloned_repo'\n};"
      },
      "id": "init-log-node",
      "name": "Initialize Logging",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 300]
    },
    {
      "parameters": {
        "command": "find /data/shared/cloned_repo -type f -name '*.swift' | head -3"
      },
      "id": "find-files-node",
      "name": "Find Swift Files",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [560, 300]
    },
    {
      "parameters": {
        "jsCode": "// 첫 번째 파일만 처리\nconst findResult = $('Find Swift Files').first().json;\n\nif (findResult.exitCode !== 0) {\n  throw new Error(`파일 검색 실패: ${findResult.stderr}`);\n}\n\nconst fileList = findResult.stdout.trim().split('\\n').filter(f => f.length > 0);\nconsole.log(`📁 발견된 Swift 파일: ${fileList.length}개`);\n\nif (fileList.length === 0) {\n  throw new Error('❌ Swift 파일을 찾을 수 없습니다.');\n}\n\n// 첫 번째 파일만 처리\nconst firstFile = fileList[0];\nconsole.log(`🎯 처리할 파일: ${firstFile}`);\n\nreturn {\n  filePath: firstFile,\n  fileName: firstFile.split('/').pop(),\n  fileType: 'swift',\n  totalFiles: fileList.length\n};"
      },
      "id": "select-first-file-node",
      "name": "Select First File",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [720, 300]
    },
    {
      "parameters": {
        "operation": "read",
        "filePath": "={{ $json.filePath }}",
        "options": {}
      },
      "id": "read-file-node",
      "name": "Read File Content",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [880, 300]
    },
    {
      "parameters": {
        "jsCode": "// 파일 내용 청킹\nconst fileInfo = $('Select First File').first().json;\nconst fileData = $json;\nconst content = fileData.data; // Read File 노드의 데이터\n\nconsole.log(`📄 처리 중: ${fileInfo.fileName}`);\nconsole.log(`📏 파일 크기: ${content.length} 문자`);\n\nif (!content || content.length < 50) {\n  console.log(`⏭️  파일 스킵 (너무 작음): ${fileInfo.fileName}`);\n  return {\n    error: 'File too small',\n    file_name: fileInfo.fileName,\n    file_size: content.length\n  };\n}\n\n// 텍스트 청킹 (1000자 단위, 100자 오버랩)\nconst chunkSize = 1000;\nconst chunkOverlap = 100;\nconst chunks = [];\n\nif (content.length <= chunkSize) {\n  // 파일이 작으면 전체를 하나의 청크로\n  chunks.push({\n    text_chunk: content.trim(),\n    chunk_index: 0,\n    file_path: fileInfo.filePath,\n    file_name: fileInfo.fileName,\n    file_type: fileInfo.fileType,\n    chunk_size: content.length,\n    total_chunks: 1\n  });\n} else {\n  // 큰 파일은 오버랩을 고려해서 분할\n  let start = 0;\n  let chunkIndex = 0;\n  \n  while (start < content.length && chunkIndex < 5) { // 최대 5개 청크로 제한\n    const end = Math.min(start + chunkSize, content.length);\n    const chunk = content.slice(start, end).trim();\n    \n    if (chunk.length > 0) {\n      chunks.push({\n        text_chunk: chunk,\n        chunk_index: chunkIndex,\n        file_path: fileInfo.filePath,\n        file_name: fileInfo.fileName,\n        file_type: fileInfo.fileType,\n        chunk_size: chunk.length,\n        total_chunks: 'calculating...'\n      });\n      chunkIndex++;\n    }\n    \n    start = end - chunkOverlap;\n  }\n  \n  // 총 청크 수 업데이트\n  chunks.forEach(chunk => chunk.total_chunks = chunks.length);\n}\n\nconsole.log(`📊 ${fileInfo.fileName}: ${chunks.length}개 청크 생성`);\n\n// 첫 번째 청크만 반환 (테스트용)\nreturn chunks[0] || { error: 'No chunks created' };"
      },
      "id": "create-chunks-node",
      "name": "Create Text Chunks",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1040, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.text_chunk }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-chunk-valid",
      "name": "Check Chunk Valid",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "url": "http://embedding-service:8080/embed",
        "sendQuery": false,
        "sendHeaders": false,
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "={{ JSON.stringify({\"inputs\": $json.text_chunk}) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "generate-embeddings-node",
      "name": "Generate Embeddings",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1360, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-embedding-success",
      "name": "Check Embedding Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1520, 200]
    },
    {
      "parameters": {
        "jsCode": "// 임베딩 결과 처리 및 Qdrant 포인트 준비\nconst chunkData = $('Create Text Chunks').first().json;\nconst embeddingResponse = $('Generate Embeddings').first().json;\n\n// 임베딩 벡터 추출\nconst embedding = embeddingResponse[0]; // 첫 번째 임베딩\n\nif (!embedding || !Array.isArray(embedding)) {\n  throw new Error('❌ 임베딩 응답이 유효하지 않습니다');\n}\n\nconsole.log(`🔢 임베딩 차원: ${embedding.length}`);\n\nif (embedding.length !== 384) {\n  console.warn(`⚠️  예상과 다른 임베딩 차원: ${embedding.length} (예상: 384)`);\n}\n\n// Qdrant 포인트 생성\nconst pointId = Date.now().toString() + '_' + Math.random().toString(36).substr(2, 9);\n\nconst qdrantPoint = {\n  id: pointId,\n  vector: embedding,\n  payload: {\n    text_chunk: chunkData.text_chunk.substring(0, 500) + '...', // 첫 500자만 저장\n    file_path: chunkData.file_path,\n    file_name: chunkData.file_name,\n    file_type: chunkData.file_type,\n    chunk_index: chunkData.chunk_index,\n    total_chunks: chunkData.total_chunks,\n    chunk_size: chunkData.chunk_size,\n    indexed_at: new Date().toISOString()\n  }\n};\n\nconsole.log(`✅ Qdrant 포인트 준비 완료: ${chunkData.file_name} [${chunkData.chunk_index}/${chunkData.total_chunks}]`);\n\nreturn qdrantPoint;"
      },
      "id": "prepare-qdrant-point-node",
      "name": "Prepare Qdrant Point",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1680, 200]
    },
    {
      "parameters": {
        "url": "http://qdrant:6333/collections/codebase_collection/points",
        "sendQuery": false,
        "sendHeaders": false,
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "={{ JSON.stringify({\n  \"points\": [$json]\n}) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "store-in-qdrant-node",
      "name": "Store in Qdrant",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1840, 200]
    },
    {
      "parameters": {
        "jsCode": "// 저장 결과 확인 및 로깅\nconst qdrantResponse = $json;\nconst chunkData = $('Prepare Qdrant Point').first().json;\n\nconsole.log('📊 Qdrant 응답:', JSON.stringify(qdrantResponse, null, 2));\n\nif (qdrantResponse.status === 'ok') {\n  console.log(`🎉 인덱싱 완료: ${chunkData.payload.file_name}`);\n  \n  return {\n    status: 'success',\n    point_id: chunkData.id,\n    file_name: chunkData.payload.file_name,\n    chunk_index: chunkData.payload.chunk_index,\n    total_chunks: chunkData.payload.total_chunks,\n    vector_dimension: chunkData.vector.length,\n    stored_at: new Date().toISOString(),\n    message: '첫 번째 파일의 첫 번째 청크가 성공적으로 인덱싱되었습니다'\n  };\n} else {\n  console.error(`❌ Qdrant 저장 실패:`, qdrantResponse);\n  throw new Error(`Qdrant 저장 실패: ${JSON.stringify(qdrantResponse)}`);\n}"
      },
      "id": "verify-storage-node",
      "name": "Verify Storage",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, 200]
    },
    {
      "parameters": {
        "jsCode": "// 청크가 유효하지 않음\nconst chunkData = $json;\n\nconsole.error(`❌ 청크 생성 실패:`, chunkData);\n\nreturn {\n  error: 'Invalid chunk',\n  details: chunkData,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "handle-chunk-error",
      "name": "Handle Chunk Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1360, 400]
    },
    {
      "parameters": {
        "jsCode": "// 임베딩 실패 처리\nconst embeddingResponse = $('Generate Embeddings').first().json;\n\nconsole.error(`❌ 임베딩 생성 실패:`, embeddingResponse);\n\nreturn {\n  error: 'Embedding generation failed',\n  response: embeddingResponse,\n  timestamp: new Date().toISOString(),\n  suggestion: 'Check embedding service at http://localhost:8080'\n};"
      },
      "id": "handle-embedding-error",
      "name": "Handle Embedding Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1680, 400]
    }
  ],
  "connections": {
    "Start Indexing": {
      "main": [
        [
          {
            "node": "Initialize Logging",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Logging": {
      "main": [
        [
          {
            "node": "Find Swift Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Swift Files": {
      "main": [
        [
          {
            "node": "Select First File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select First File": {
      "main": [
        [
          {
            "node": "Read File Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read File Content": {
      "main": [
        [
          {
            "node": "Create Text Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Text Chunks": {
      "main": [
        [
          {
            "node": "Check Chunk Valid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Chunk Valid": {
      "main": [
        [
          {
            "node": "Generate Embeddings",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Chunk Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Embeddings": {
      "main": [
        [
          {
            "node": "Check Embedding Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Embedding Success": {
      "main": [
        [
          {
            "node": "Prepare Qdrant Point",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Embedding Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Qdrant Point": {
      "main": [
        [
          {
            "node": "Store in Qdrant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store in Qdrant": {
      "main": [
        [
          {
            "node": "Verify Storage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["indexing", "RAG", "single-file", "test"],
  "triggerCount": 0,
  "updatedAt": "2024-09-22T05:15:00.000Z",
  "versionId": "4"
}